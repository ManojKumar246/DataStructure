#include<stdio.h>
#include<stdlib.h>

struct Node
{
 int price;
 struct Node *prev, *next;
};
struct Node *head=NULL, *tail=NULL;
void append(int price)
{
  struct Node*newnode=malloc(sizeof *newnode);
  newnode->price=price;
  newnode->next=NULL;
  if(head==NULL)
  {
    head=tail=newnode;
    head->prev=NULL;
  }
  else
  {
    newnode->prev=tail;
    tail->next=newnode;
    tail=newnode;
  }
}
void removeAt(int position)
{
 int counter=1;
 struct Node *ptr = head;
 if(position == 1)
 {
 head = head->next;
 if(head->next != NULL){
 head->next->prev = head;
 }
 head->prev = NULL;
 free(ptr);
 }
 else
 {
 while(counter < position-1)
 {
 ptr = ptr->next;
 counter++;
 }
 struct Node *temp = ptr->next;
 if(ptr->next == tail){
 tail = tail->prev;
 }
 ptr->next = ptr->next->next;
 if(ptr->next != NULL){
 ptr->next->prev = ptr;
 }
 free(temp);
 }
}
int main()
{
 int N=5, counter, price, position;
 int arr[5]={10,20,30,40,50};
 scanf("%d", &N);
 for(counter=0; counter<N; counter++)
 {
 scanf("%d", &price);
 append(arr[counter]);
 }
 int M=3;
 scanf("%d", &M);
 int p[4]={1,2,4};
 int K=0;
 while(M--)
 {
   scanf("%d", &position);
 removeAt(p[K++]);
 }
 struct Node *ptr = tail;
 while(ptr != NULL)
 {
 printf("%d <=> ", ptr->price);
 ptr = ptr->prev;
 }
 printf("NULL");
}
